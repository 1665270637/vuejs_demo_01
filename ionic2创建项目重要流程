常用命令：
ionic info 环境的所有版本
验证是否安装好node.js的方法是在命令提示符中输入node -v
验证是否安装好java环境  命令提示符中输入javac
验证是否安装好ant的方法是在命令提示符中输入ant -v
验证是否安装好cordova的方法是在命令提示符中输入cordova -v
验证是否安装好ionic的方法是在命令提示符中输入ionic -v

可以更新npm至最新版本。 npm install npm@版本号 -g

清空npm缓存：npm cache clean
查看npm源：npm config get registry
临时切换npm源为taobao源（速度快一点）：npm config set registry https://registry.npm.taobao.org
***************************************
安装cli
npm install -g angular-cli
如果安装过以前的版本，请执行以下命令，进行更新：
npm uninstall -g angular-cli
npm cache clean
npm install -g angular-cli@latest
*************************
用cnpm安装cli

npm install -g cnpm --registry=https://registry.npm.taobao.org
cnpm install -g @angular/cli@latest
ng new start --registry=https://registry.npm.taobao.org
现在Angular CLI在npm下通过@angular/cli来替代angular-cli，并且它只支持Node6.9.0或更高的版本，npm 3或更高的版本。所以在升级angular cli之前，请先升级node和npm。
如果你使用Angular CLI beta.28或更低的版本，你需要先卸载掉 angular-cli包：
npm uninstall -g angular-cli
npm uninstall --save-dev angular-cli
如果你忘记了更新npm，执行上面第一行命令时，会提示你将npn更新到最新版本，npm更新到最新版本后，再执行上面两行命令即可。
将Angular CLI更新到新版本，你必须更新全局包和你项目的本地包。

全局包：
cnpm uninstall -g @angular/cli
cnpm cache clean
cnpm install -g @angular/cli@latest(npm往往会导致安装失败，你可以使用cnpm)

本地项目下的包：
rm -rf node_modules dist # use rmdir on Windows(删除node_modules和dist目录)
npm install --save-dev @angular/cli@latest(npm往往会导致安装失败，你可以使用cnpm)
npm install

*************************
大漠的anular2项目创建
1、npm i -g cnpm
2、cnpm i -g @angular/cli
3、ng help
4、cnpm install    补全依赖包（在项目目录下执行）
//安装ng2// npm install ng2-bootstrap bootstrap --save
5、ng serve --prod --aot  启动服务

npm uninstall xxx (-g)卸载

6、ng serve 启动

7、ng bulid --prod --aot  编译

————————————————————————————————————————————————————————————————————————————————————————————————————————————————
ionic2、新项目创建
1、npm install -g angular-cli
2、ng --help
3、ng new 项目名字
4、ng serve
****************************************
1创建新项目ionic2-tutorial
可选模板为sidemenu 侧滑、tabs 底部tab切换、blank 空白）
1)ionic start ionic2-tutorial tutorial --v2  用这个
2)ionic start MenuDemo sidemenu --v2
ionic start myAwesomeApp tabs --v2
3)ionic serve 启动

安装cordova及ionic包
npm install -g cordova ionic
更新cordova及ionic包
npm update -g angular-cli cordova ionic
卸载cordova及ionic包
npm uninstall -g cordova ionic

2.如果是下载的项目先要在项目目录下 npm install 补全依赖包
***********************************************
.两种打包的版本  java -version检查java版本
一种是debug调试版，一种是release发布版
打包debug调试版
1、构建平台
    ionic cordova platform
    ionic cordova platform add ios
    ionic cordova platform add android
    ionic cordova platform rm ios
    
   ionic cordova platform add android     在项目根目录会生成\platforms 这个文件夹
   ionic cordova platform rm android移除平台 平台大概20M迁移项目时候需要删掉）
2、在工程目录下执行ionic build android，ionic cordova build android 生成的apk就是debug调试版本
3、ionic cordova run android  在模拟器上运行★★★★★
4、ionic cordova run ios   在模拟器上运行★★★★★

****生成签名(.keystore)文件******
3.在\platforms\android 下执行
keytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore
/*说明：-genkey 产生密钥
       -alias demo.keystore 别名 demo.keystore
       -keyalg RSA 使用RSA算法对签名加密
       -validity 40000 有效期限4000天
       -keystore demo.keystore */

4.打包release发布版在项目根目录下执行  这里生成的是未签名的APK

  0）cordova prepare   运行此命令在你的终端安装所有需要的puglins

  1） cordova plugin rm cordova-plugin-console 移除console

  2） ionic build android --release --prod --device

其中 ionic build android –prod –device 中的 –prod 表示启用aot；–device 将要求略过白屏启动时间。 

****签名apk******
5.在\platforms\android 下执行（把第4步的未签名APK也复制到本目录下）
jarsigner -verbose -keystore demo.keystore -signedjar demo_signed.apk android-release-unsigned.apk demo.keystore

我建的都是6个1密钥

如果没有配置签名文件则默认只生成android-release-unsigned.apk，没有签名的apk。release版本是必须有签名才能在手机上运行。

**************修改启动图标和开场图片****************
1.根目录-》resources  替换2涨图片
2.根目录执行ionic resources  这时会在根目录resources下生成各种大小名字的图片把名字记住
3.复制对应的\platforms\android\res 的文件夹内 
5.重新打包
***********************i18n国际化**********************************
npm install ng2-translate --save  安装ng2-translate
import { TranslateModule, TranslateLoader, TranslateStaticLoader } from 'ng2-translate';

import { Http } from '@angular/http';

export function createTranslateLoader(http: Http) {
    return new TranslateStaticLoader(http, './assets/i18n', '.json');
}

TranslateModule.forRoot({
      provide: TranslateLoader,
      useFactory: (createTranslateLoader),
      deps: [Http]
    }),]
以上在app.module内设置





vuejs 交流群 364912432
angularjs 交流群  238251402
react 交流群 530415177
